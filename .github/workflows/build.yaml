name: Build

on:
  workflow_call:
    inputs:
      force:
        description: "Force rebuild"
        required: false
        default: false
        type: boolean
      push:
        description: "Push the images"
        required: false
        default: true
        type: boolean
      limit:
        description: "Limit the packages"
        required: false
        type: string

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install check-jsonschema

      - name: Validate packages
        run: |
          find ./packages/ -name package.yaml | xargs -I {} check-jsonschema --schemafile ./package.schema.json {}

  prepare:
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      matrix: ${{ steps.prepare.outputs.matrix }}
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install PyYAML requests

      - name: Prepare packages
        id: prepare
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          matrix=$(
            python3 ./.github/scripts/prepare.py \
              --packages ./packages \
              --owner ${{ github.repository_owner }} \
              --registry ghcr.io \
              --force ${{ inputs.force == true }} \
              --limit ${{ inputs.limit || 'all' }}
          )

          echo "matrix=${matrix}" >> $GITHUB_OUTPUT
          echo "${matrix}"

  build:
    runs-on: ubuntu-latest
    needs: prepare
    permissions:
      contents: read
      packages: write
    if: ${{ needs.prepare.outputs.matrix != '[]' }}
    strategy:
      matrix:
        package: ["${{ fromJson(needs.prepare.outputs.matrix) }}"]

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Goss
        if: ${{ matrix.package.goss.enabled }}
        uses: e1himself/goss-installation-action@v1
        with:
          version: latest

      - name: Build Image
        uses: docker/build-push-action@v6
        id: build-test
        with:
          load: true
          build-args: |-
            VERSION=${{ matrix.package.version }}
          context: ./packages/${{ matrix.package.name }}
          file: ./packages/${{ matrix.package.name }}/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: "ghcr.io/${{ github.repository_owner }}/${{ matrix.package.name }}:test"

      - name: Run Goss Tests
        id: dgoss
        if: ${{ matrix.package.goss.enabled }}
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ${{ matrix.package.goss.config }}
          GOSS_OPTS: --retry-timeout 60s --sleep 2s --color --format documentation
          GOSS_SLEEP: 2
          GOSS_FILES_STRATEGY: cp
          CONTAINER_LOG_OUTPUT: goss_container_log_output
        shell: bash
        run: |
          image="ghcr.io/${{ github.repository_owner }}/${{ matrix.package.name }}:test"

          if [[ -z "${{ matrix.package.goss.entrypoint }}" ]]; then
            dgoss run $image ${{ matrix.package.goss.args }}
          else
            dgoss run --entrypoint "${{ matrix.package.goss.entrypoint }}" $image ${{ matrix.package.goss.args }}
          fi

      - name: Show container logs
        if: ${{ always() && matrix.package.goss.enabled }}
        shell: bash
        run: |
          cat ./goss_container_log_output

      - name: Build and Push Image
        uses: docker/build-push-action@v6
        id: build-push
        if: ${{ inputs.push == true }}
        with:
          push: true
          build-args: |-
            VERSION=${{ matrix.package.version }}
          context: ./packages/${{ matrix.package.name }}
          platforms: ${{ join(matrix.package.platforms, ',') }}
          file: ./packages/${{ matrix.package.name }}/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |-
            org.opencontainers.image.title=${{ matrix.package.name }}
            org.opencontainers.image.url=https://ghcr.io/${{ github.repository_owner }}/${{ matrix.package.name }}
            org.opencontainers.image.version=${{ matrix.package.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
          tags: ${{ join(matrix.package.tags, ',') }}
